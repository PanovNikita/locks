import streamlit as st
import pandas as pd
import os
from datetime import datetime
from collections import Counter
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Locks Analyser", page_icon="üîí", layout="wide")


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    if not os.path.exists("data.csv"):
        return None, "–§–∞–π–ª data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    try:
        df = pd.read_csv("data.csv", header=None, dtype=str)
        return df, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ data.csv: {str(e)}"


def get_file_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
    if os.path.exists("data.csv"):
        stat = os.stat("data.csv")
        mod_time = datetime.fromtimestamp(stat.st_mtime).strftime("%d.%m.%Y %H:%M")
        return mod_time
    return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"


def normalize_row_number(row_num):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∫ 6-–∑–Ω–∞—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    try:
        num = int(row_num)
        return f"{num:06d}"
    except:
        return None


def validate_data(df):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö CSV —Ñ–∞–π–ª–∞"""
    errors = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if df.shape[1] < 7:
        errors.append(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 7 –∫–æ–ª–æ–Ω–æ–∫ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ + 6 –∑–Ω–∞—á–µ–Ω–∏–π)"
        )
        return errors

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
    row_numbers = df[0].tolist()
    duplicates = [item for item, count in Counter(row_numbers).items() if count > 1]
    if duplicates:
        errors.append(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫: {', '.join(duplicates)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for idx, row in df.iterrows():
        row_num = row[0]
        for col_idx in range(1, 7):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ 1-6
            if col_idx < len(row):
                value = str(row[col_idx]).strip()
                if value and value != "nan":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    try:
                        num_val = int(value)
                        if num_val < 10 or num_val > 99:
                            errors.append(
                                f"–°—Ç—Ä–æ–∫–∞ {row_num}, –ø–æ–∑–∏—Ü–∏—è {col_idx}: –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–≤—É–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º"
                            )
                    except ValueError:
                        errors.append(
                            f"–°—Ç—Ä–æ–∫–∞ {row_num}, –ø–æ–∑–∏—Ü–∏—è {col_idx}: –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"
                        )
            else:
                errors.append(
                    f"–°—Ç—Ä–æ–∫–∞ {row_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ {col_idx}"
                )

    return errors


def check_range_integrity(df, start_num, end_num):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    missing_rows = []
    existing_rows = set(df[0].astype(str).tolist())

    for i in range(int(start_num), int(end_num) + 1):
        row_num = f"{i:06d}"
        if row_num not in existing_rows:
            missing_rows.append(row_num)

    return missing_rows


def get_single_row(df, row_number):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
    normalized_num = normalize_row_number(row_number)
    if not normalized_num:
        return None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏"

    row_data = df[df[0] == normalized_num]
    if row_data.empty:
        return None, f"–°—Ç—Ä–æ–∫–∞ {normalized_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    return row_data.iloc[0], None


def calculate_digit_difference(num):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä –¥–≤—É–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
    if pd.isna(num) or str(num).strip() == "":
        return None
    try:
        num_str = str(int(num))
        if len(num_str) == 2:
            return abs(int(num_str[0]) - int(num_str[1]))
        else:
            return None
    except:
        return None


def is_mirror_number(num):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º"""
    if pd.isna(num) or str(num).strip() == "":
        return False
    try:
        num_str = str(int(num))
        if len(num_str) == 2:
            return num_str[0] == num_str[1]
        return False
    except:
        return False


def analyze_range(df, start_range, end_range, is_skat=False):
    """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫"""
    start_num = normalize_row_number(start_range)
    end_num = normalize_row_number(end_range)

    if not start_num or not end_num:
        return None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞"

    if int(start_num) > int(end_num):
        return None, "–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ü–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    missing_rows = check_range_integrity(df, start_num, end_num)
    if missing_rows:
        return None, f"–í –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–æ–∫–∏: {', '.join(missing_rows)}"

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
    df_filtered = df[
        (df[0].astype(str) >= start_num) & (df[0].astype(str) <= end_num)
    ].copy()

    if df_filtered.empty:
        return None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    cols_to_analyze = 5 if is_skat else 6

    # –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —á–∏—Å–µ–ª
    number_counts = {}
    special_numbers = [11, 22, 33, 44, 55, 66, 77]

    for _, row in df_filtered.iterrows():
        for col_idx in range(1, cols_to_analyze + 1):
            if col_idx < len(row):
                try:
                    value = int(row[col_idx])
                    if 10 <= value <= 99:  # –î–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ
                        if value not in number_counts:
                            number_counts[value] = 0
                        number_counts[value] += 1

                        # –í —Ä–µ–∂–∏–º–µ –°–ö–ê–¢ –¥–æ–±–∞–≤–ª—è–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                        if is_skat:
                            mirror_value = get_mirror_pair(value)
                            if (
                                mirror_value and mirror_value != value
                            ):  # –ï—Å–ª–∏ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                                if mirror_value not in number_counts:
                                    number_counts[mirror_value] = 0
                                number_counts[mirror_value] += 1
                except:
                    continue

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —à—Ç–∞–º–ø–∞–º (—Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä)
    stamps = {}
    for number, count in number_counts.items():
        diff = calculate_digit_difference(number)
        if diff is not None:
            if diff not in stamps:
                stamps[diff] = {}

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            if is_skat and number in special_numbers:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –°–ö–ê–¢: –æ–Ω–∏ —Å–∞–º–∏ —Å–µ–±–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ,
                # –ø–æ—ç—Ç–æ–º—É —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–∏, –∑–∞—Ç–µ–º –µ—â–µ √ó2 = –∏—Ç–æ–≥–æ √ó4
                display_count = count * 2  # –£–∂–µ —É–¥–≤–æ–µ–Ω—ã –ø—Ä–∏ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–∏, –µ—â–µ √ó2
            else:
                display_count = count * 2  # –û–±—ã—á–Ω–æ–µ —É–¥–≤–æ–µ–Ω–∏–µ

            stamps[diff][number] = display_count

    return stamps, None


def get_mirror_pair(number):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
    num_str = str(number)
    if len(num_str) == 2:
        return int(num_str[1] + num_str[0])
    return None


def format_stamp_display(stamp_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à—Ç–∞–º–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not stamp_data:
        return []

    processed_numbers = set()
    lines = []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    for number in sorted(stamp_data.keys()):
        if number in processed_numbers:
            continue

        count = stamp_data[number]
        mirror = get_mirror_pair(number)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Å–∞–º–æ —Å–µ–±–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º
        if (
            mirror
            and mirror != number
            and mirror in stamp_data
            and mirror not in processed_numbers
        ):

            mirror_count = stamp_data[mirror]
            lines.append(f"{number} ({count}—à—Ç) ‚áÑ {mirror} ({mirror_count}—à—Ç)")
            processed_numbers.add(number)
            processed_numbers.add(mirror)
        else:
            lines.append(f"{number} ({count}—à—Ç)")
            processed_numbers.add(number)

    return lines


def format_results_for_copy(stamps, is_skat=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = []
    text.append("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===")
    text.append("")

    mode = "–°–ö–ê–¢" if is_skat else "–û–±—ã—á–Ω—ã–π"
    text.append(f"–†–µ–∂–∏–º: {mode}")
    text.append("")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à—Ç–∞–º–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É
    for stamp_num in sorted(stamps.keys()):
        stamp_data = stamps[stamp_num]
        if stamp_data:  # –ï—Å–ª–∏ –≤ —à—Ç–∞–º–ø–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            text.append(f"–®—Ç–∞–º–ø: {stamp_num}")
            lines = format_stamp_display(stamp_data)
            for line in lines:
                text.append(line)
            text.append("")

    return "\n".join(text).rstrip()


def main():
    st.title("üîí Locks Analyser")
    st.markdown("---")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    file_mod_time = get_file_info()
    df, load_error = load_data()

    if load_error:
        st.error(load_error)
        st.stop()

    row_count = len(df)
    st.info(f"üìÑ –§–∞–π–ª: data.csv | –û–±–Ω–æ–≤–ª–µ–Ω: {file_mod_time} | –°—Ç—Ä–æ–∫: {row_count}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validation_errors = validate_data(df)
    if validation_errors:
        st.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for error in validation_errors:
            st.write(f"‚Ä¢ {error}")
        st.stop()
    else:
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")

        col1_1, col1_2 = st.columns(2)
        with col1_1:
            start_range = st.text_input("–û—Ç:", placeholder="001000 –∏–ª–∏ 1000")
        with col1_2:
            end_range = st.text_input("–î–æ:", placeholder="001020 –∏–ª–∏ 1020")

        is_skat = st.checkbox(
            "–≠—Ç–æ –°–ö–ê–¢?",
            help="–í —Ä–µ–∂–∏–º–µ –°–ö–ê–¢ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —É–º–Ω–æ–∂–∞—é—Ç—Å—è –Ω–∞ 4",
        )

        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω", type="primary"):
            if start_range and end_range:
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                    stamps, error = analyze_range(df, start_range, end_range, is_skat)

                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —à—Ç–∞–º–ø–∞–º
                    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à—Ç–∞–º–ø–∞–º")

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à—Ç–∞–º–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É
                    for stamp_num in sorted(stamps.keys()):
                        stamp_data = stamps[stamp_num]
                        if stamp_data:  # –ï—Å–ª–∏ –≤ —à—Ç–∞–º–ø–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                            st.write(f"**–®—Ç–∞–º–ø: {stamp_num}**")
                            lines = format_stamp_display(stamp_data)
                            for line in lines:
                                st.write(line)
                            st.write("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —à—Ç–∞–º–ø–∞–º–∏

                    # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    formatted_text = format_results_for_copy(stamps, is_skat)

                    # JavaScript –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    escaped_text = (
                        formatted_text.replace("\\", "\\\\")
                        .replace("`", "\\`")
                        .replace("\n", "\\n")
                        .replace("\r", "\\r")
                    )
                    copy_script = f"""
                    <script>
                    function copyToClipboard() {{
                        const text = `{escaped_text}`;
                        if (navigator.clipboard && navigator.clipboard.writeText) {{
                            navigator.clipboard.writeText(text).then(function() {{
                                alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                            }}).catch(function() {{
                                fallbackCopy(text);
                            }});
                        }} else {{
                            fallbackCopy(text);
                        }}
                    }}
                    
                    function fallbackCopy(text) {{
                        const textArea = document.createElement('textarea');
                        textArea.value = text;
                        textArea.style.position = 'fixed';
                        textArea.style.left = '-999999px';
                        textArea.style.top = '-999999px';
                        document.body.appendChild(textArea);
                        textArea.focus();
                        textArea.select();
                        try {{
                            document.execCommand('copy');
                            alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                        }} catch (err) {{
                            prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:', text);
                        }}
                        document.body.removeChild(textArea);
                    }}
                    </script>
                    
                    <button onclick="copyToClipboard()" style="
                        background-color: #ff4b4b;
                        color: white;
                        border: none;
                        padding: 0.5rem 1rem;
                        border-radius: 0.25rem;
                        cursor: pointer;
                        font-size: 14px;
                        margin-top: 10px;
                    ">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
                    """

                    st.components.v1.html(copy_script, height=100)

                    # Fallback - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    with st.expander(
                        "üìù –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
                    ):
                        st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", formatted_text, height=200)
            else:
                st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    with col2:
        st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–æ–∫–∏")

        row_number = st.text_input("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:", placeholder="001010 –∏–ª–∏ 1010")

        if st.button("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É"):
            if row_number:
                row_data, error = get_single_row(df, row_number)
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.success(f"‚úÖ –°—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {row_data[0]}")

                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_data = []
                    for i in range(1, min(7, len(row_data))):
                        display_data.append([f"–ü–æ–∑–∏—Ü–∏—è {i}", row_data[i]])

                    df_display = pd.DataFrame(
                        display_data, columns=["–ü–æ–∑–∏—Ü–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
                    )
                    st.table(df_display)
            else:
                st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏")

    # –°–ø—Ä–∞–≤–∫–∞
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"):
        st.markdown(
            """
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        
        1. **–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞**: –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç—Ä–æ–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        2. **–†–µ–∂–∏–º –°–ö–ê–¢**: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫, —á–∏—Å–ª–∞ 11,22,33,44,55,66,77 —É–º–Ω–æ–∂–∞—é—Ç—Å—è –Ω–∞ 4
        3. **–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–æ–∫–∏**: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        
        **–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫:**
        - 001234 (—Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)  
        - 1234 (–±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π)
        
        **–ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
        - ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        - ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª (10-99)
        - ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫
        """
        )


if __name__ == "__main__":
    main()
